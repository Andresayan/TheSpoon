swagger: "2.0"
info:
  description: "This is the API reference of The Spoon project.\n \n VERSIONING: The version number works in this way: it's composed of two numbers separated by a point. The first number identifies the Sprint, so for example the version 2.1 of the API reference is related to the Sprint number 2. The second number starts from 0 and has to be increased by one each time the file is modified. The person who modifies this document is responsible for increasing the number.\n \n GROUPING OF ENDPOINTS: The endpoints are grouped by dividing them into customers' operations and owners' operations. All the endpoints that are not strictly related to customers nor owners remain inside the default group.\n \n AUTHENTICATION/AUTHORIZATION: The json web token returned when the login is performed is supposed to be put into x-auth-token header in the endpoints that require authorization"
  version: "4.0"
  title: "The Spoon API reference"
tags:
  - name: "customer"
    description: "Operations about customers"
  - name: "owner"
    description: "Operations about owners"
paths:
  /api/user/customer/register:
    post:
      tags:
        - "customer"
      summary: "Creates customer"
      description: "Creates a new customer profile. This endpoint is used only for customer registration.\n The endpoint, if the registration succeeds, returns the username of the account as a confirmation."
      operationId: "createCustomer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer that needs to register"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        201:
          description: "Customer registered"
          schema:
            $ref: "#/definitions/Username"
        400:
          description: "Username or email already taken"
  /api/user/owner/register:
    post:
      tags:
        - "owner"
      summary: "Creates restaurant owner"
      description: "Creates a new restaurant owner profile. This endpoint is used only for restaurant owner registration.\n The endpoint, if the registration succeeds, returns the username of the account as a confirmation."
      operationId: "createOwner"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Restaurant owner that needs to register"
          required: true
          schema:
            $ref: "#/definitions/Owner"
      responses:
        201:
          description: "Restaurant owner registered"
          schema:
            $ref: "#/definitions/Username"
        400:
          description: "Username or email already taken"
  /api/user/login:
    post:
      tags:
        - "generic user"
      summary: "Logs user into the system"
      description: "Logs user into the system. This endpoint is used both for restaurant owner and customer login. In order to distinguish them, in the request json there's the flag ''isRestaurantOwner''.\n If the login succeeds, returns the json web token that is supposed to be stored on the frontend application (for example in the local storage of the web browser). Each time the frontend application needs to access an endpoint that requires authentication, that token will be put in the header of the request."
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User that needs to register"
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Token"
        400:
          description: "Invalid username or password"
  /api/user/owner/restaurant:
    post:
      tags:
        - "owner"
        - "Matej"
      summary: "Configure data of the restaurant"
      description: "Save the data of the restaurant given by the owner. Authentication is needed.\n One of the parameter to be passed is the imageID, this is the flow:\n 1. The restaurant owner is in the page in which he can input the restaurant data. He will upload the photo of the restaurant while he is writing all the fields of the form.\n 2. The uploading of the photo is done by sending the photo to the /api/image endpoint. While the restaurant owner is still writing the fields of the form, the message to that endpoint is sent and the imageID is received as a response.\n 3. When the restaurant owner finishes writing the fields of the form and click the send button, the photo was actually already been ent in the point 2 and he doesn't have to wait for the upload (if he was fast compiling the form and the upload isn't finished yet, at least he has to wait less because it was already started). The imageID received as a response by the /api/image endpoint will be sent to this endpoint with the data of the form in a json, because the backend needs it in order to associate the json to the previously uploaded photo."
      operationId: "configureRestaurant"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Restaurant data"
          required: true
          schema:
            $ref: "#/definitions/Restaurant"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/RestaurantID"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
    get:
      tags:
        - "owner"
        - "Matej"
      summary: "Get data of own restaurant"
      description: "Get the data of the restaurant of authenticated owner, so that it can be showed in the 'Your Restaurant' page."
      operationId: "getRestaurant"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: '#/definitions/RestaurantReceived'
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
  /api/user/owner/restaurant/menu:
    post:
      tags:
        - "owner"
        - "Emilio"
      summary: "Add an empty menu to a restaurant"
      description: "Add a menu to a restaurant of a restaurant owner, which needs to be logged in. The menuItems are not meant to be added to the menu through this endpoint."
      operationId: "addMenu"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Menu data"
          required: true
          schema:
            $ref: "#/definitions/MenuWithoutItems"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MenuID"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
    get:
      tags:
        - "owner"
        - "Frikk"
      summary: "Return all the menus of the restaurant"
      description: "Return all the menus of the restaurant. Since authentication is required, the backend is able to get which restaurant is involved from the authentication token."
      operationId: "getOwnMenus"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MenuCompleteWithID"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
  /api/user/owner/restaurant/menu/{menuID}:
    put:
      tags:
        - "owner"
        - "Emilio"
      summary: "Edit a menu's information (not its items)"
      description: "Edit a given menu (but not its menuItems). To identify the menu, the menuID needs to be given. Authentication is required."
      operationId: "editMenu"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "menuID"
          in: "path"
          description: "ID of the menu to be edited"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          description: "Data of the menu to be saved"
          required: true
          schema:
            $ref: "#/definitions/MenuWithoutItems"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MenuID"
        404:
          description: "Menu not found"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
    delete:
      tags:
        - "owner"
        - "Emilio"
      summary: "Delete a menu"
      description: "Delete a menu of the restaurant. Authentication is required"
      operationId: "deleteMenu"
      parameters:
        - name: "menuID"
          in: "path"
          description: "ID of the menu to be edited"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"

  /api/user/customer/menu/searchByMenuItem:
    get:
      tags:
        - "customer"
        - "Frikk"
      summary: "Search by menu item"
      description: "Returns all the menus with given menu item (dish/drink) with menuID. It also returns the names of the associated restaurants with restaurantID.\n The menu items inside every menu are not returned. It will be needed to access the endpoint /api/user/customer/menu/{menuID} to get the menu items of a specific menu (the menuID passed can be obtained from the response of this endpoint, since it returns the menuID of every menu)."
      operationId: "searchByMenuItem"
      produces:
        - "application/json"
      parameters:
        - name: "menuItemName"
          in: "query"
          description: "Name of the desired menu item"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MenuAndRestaurant"
  /api/user/customer/menu/{menuID}:
    get:
      tags:
        - "customer"
        - "Frikk"
      summary: "Return data of a specific menu"
      description: "Returns all the data about the menu with given menuID, even the menu items inside it. The photos of the menu items are saved in the Amazon s3 storage, so the links to the cloud storage are also returned. The frontend will directly download them from the cloud storage, they won't be sent by the backend with this endpoint."
      operationId: "getMenuCustomer"
      produces:
        - "application/json"
      parameters:
        - name: "menuID"
          in: "path"
          description: "ID of the menu to be returned"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MenuRetrievedToCustomer"
  /api/image:
    post:
      tags:
        - "generic user"
        - "Marin"
      summary: "Upload an image"
      description: "This endpoint is used in order to upload EVERY image. For example, when a restaurant owner is registering his restaurant data, he will need to upload an image. Both this endpoint and the dedicated endpoint (POST /api/user/owner/restaurant) will be used. This endpoint to upload the image, the other one to upload all the other textual data (with a json). The images will be stored using Amazon s3. The ID of the image is returned.\n For more information, this is used as a reference:  https://stackoverflow.com/questions/33279153/rest-api-file-ie-images-processing-best-practices \n This endpoint requires authentication: we don't want anyone to update images but only authenticated users."
      operationId: "uploadImage"
      consumes:
        - "image/png"
        - "image/jpeg"
      produces:
        - "application/json"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ImageID"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "user"
  /api/user/owner/restaurant/menu/{menuID}/menuItem:
    post:
      tags:
        - "owner"
        - "Marin"
      summary: "Add a menuItem to a menu"
      description: "Add a menuItem to the menu with given menuID. Authentication required."
      operationId: "addMenuItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "menuID"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Menu data"
          required: true
          schema:
            $ref: "#/definitions/MenuItemWithoutColors"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Menu"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
  /api/user/owner/restaurant/menu/{menuID}/menuItem/{menuItemID}:
    put:
      tags:
        - "owner"
        - "Marin"
      summary: "Edit a menuItem"
      description: "Edit the menuItem with given menuItemID of the menu with given menuID. Authentication required."
      operationId: "editMenuItem"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "menuID"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
        - name: "menuItemID"
          in: "path"
          description: "ID of the menuItem"
          required: true
          type: "integer"
        - name: "body"
          in: "body"
          description: "Data of the menuItem"
          required: true
          schema:
            $ref: "#/definitions/MenuItemWithoutColors"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Menu"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"
    delete:
      tags:
        - "owner"
        - "Marin"
      summary: "Delete a menuItem"
      description: "Delete the menuItem with given menuItemID of the menu with given menuID. Authentication required."
      operationId: "deleteMenuItem"
      parameters:
        - name: "menuID"
          in: "path"
          description: "ID of the menu"
          required: true
          type: "integer"
        - name: "menuItemID"
          in: "path"
          description: "ID of the menuItem"
          required: true
          type: "integer"
      responses:
        200:
          description: "Successful operation"
        401:
          description: "Access denied"
      security:
        - Bearer: []
      x-security-scopes:
        - "owner"


securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "x-auth-token"
    in: "header"


definitions:
  Token:
    type: "object"
    properties:
      token:
        type: "string"
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOjI5LCJpYXQiOjE1NjE5OTg2NjB9.SWYMJXTTM8pe6NQw1QwS-d8Btt6Isuzzk5JtH775uV0"
  Customer:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    example:
      username: "xXEmilioXx"
      email: "user@gmail.com"
      password: "123456"
  Owner:
    type: "object"
    properties:
      username:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    example:
      username: "xXEmilioXx"
      name: "Emilio"
      surname: "Imperiali"
      email: "user@gmail.com"
      password: "123456"
  Username:
    type: "object"
    properties:
      username:
        type: "string"
    example:
      username: "xXEmilioXx"
  UserLogin:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      isRestaurantOwner:
        type: "boolean"
    example:
      username: "xXEmilioXx"
      password: "123456"
      isRestaurantOwner: true
  Restaurant:
    type: "object"
    properties:
      name:
        type: "string"
      address:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      latitude:
        type: "number"
      longitude:
        type: "number"
      imageID:
        type: "integer"
      openingHours:
        type: "array"
        items:
          $ref: "#/definitions/OpenInterval"
    example:
      name: "Emilio's Pizza"
      address: "André route 45"
      city: "Rome"
      country: "Italy"
      latitude: 48.4281350802915
      longitude: -110.0792542197085
      imageID: 5
      openingHours: [{"day": "Monday", "openTime": "12.00", "closeTime": "15.00"}, {"day": "Saturday", "openTime": "19.00", "closeTime": "23.59"}]
  RestaurantID:
    type: "object"
    properties:
      restaurantID:
        type: "integer"
    example:
      restaurantID: 54
  Menu:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      menuItems:
        type: "array"
        items:
          $ref: "#/definitions/MenuItem"
    example:
      name: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags: [{"name": "Italian", "color": "#FFBC8C"}, {"name": "Mediterranean", "color": "#FFBC8C"}]
      menuItems: [{"name": "Spaghetti alla carbonara", "description": "Fantastic italian dish made of spaghetti, pig cheek, eggs, black pepper, pecorino romano", "type": "dish", "priceEuros": 10, "tags": [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Pasta", "color": "#99C99B"}, {"name": "Italian", "color": "#FFBC8C"}], "imageLink": "www.cloudStorage.com/Carbonara"}, {"name": "Polpette al sugo", "description": "Meatballs with tomato sauce", "type": "dish", "priceEuros": 7, "tags": [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Meat", "color": "#FFBC8C"}, {"name": "Italian", "color": "#FFBC8C"}], "imageLink": "www.cloudStorage.com/Meatballs"}]
  MenuItem:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      type:
        type: "string"
      priceEuros:
        type: "number"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      imageLink:
        type: "string"
    example:
      name: "Spaghetti alla carbonara"
      description: "Fantastic italian dish made of spaghetti, pig cheek, eggs, black pepper, pecorino romano"
      type: "dish"
      priceEuros: 10
      tags: [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Pasta", "color": "#99C99B"}, {"name": "Italian", "color": "#FFBC8C"}]
      imageLink: "www.cloudStorage.com/Carbonara"
  MenuItemWithoutColors:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      type:
        type: "string"
      priceEuros:
        type: "number"
      tags:
        type: "array"
        items:
          type: "string"
      imageID:
        type: "integer"
    example:
      name: "Spaghetti alla carbonara"
      description: "Fantastic italian dish made of spaghetti, pig cheek, eggs, black pepper, pecorino romano"
      type: "dish"
      priceEuros: 10
      tags: ["Mediterranean", "Pasta", "Italian"]
      imageID: 5
  MenuID:
    type: "object"
    properties:
      menuID:
        type: "integer"
    example:
      menuID: 2
  MenuWithRatingAndID:
    type: "object"
    properties:
      menuID:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      rating:
        type: "integer"
    example:
      menuID: 2
      name: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags: [{"name": "Italian", "color": "#FFBC8C"}, {"name": "Mediterranean", "color": "#FFBC8C"}]
      rating: 5
  MenuAndRestaurant:
    type: "object"
    properties:
      restaurantData:
        type: "object"
        properties:
          restaurantName:
            type: "string"
          restaurantImageLink:
            type: "string"
      menu:
        $ref: "#/definitions/MenuWithRatingAndID"
    example:
      restaurantData: {"restaurantName": "Emilio's Pizza", "restaurantImageLink": "www.cloudStorage.com/Restaurant"}
      menu: {"menuID": 2, "name": "Emilio's menu of the day", "description": "Our special menu of today", "tags": [{"name": "Italian", "color": "#FFBC8C"}, {"name": "Mediterranean", "color": "#FFBC8C"}], "rating": 5}
  ImageID:
    type: "object"
    properties:
      imageID:
        type: "integer"
    example:
      imageID: 5
  OpenInterval:
    type: "object"
    properties:
      day:
        type: "string"
      openTime:
        type: "string"
      closeTime:
        type: "string"
    example:
      day: "Monday"
      openTime: "12.00"
      closeTime: "15.00"
  RestaurantReceived:
    type: "object"
    properties:
      name:
        type: "string"
      address:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      imageLink:
        type: "string"
      openingHours:
        type: "array"
        items:
          $ref: "#/definitions/OpenInterval"
    example:
      name: "Emilio's Pizza"
      address: "André route 45"
      city: "Rome"
      country: "Italy"
      imageLink: "www.cloudStorage.com/Restaurant"
      openingHours: [{"day": "Monday", "openTime": "12.00", "closeTime": "15.00"}, {"day": "Saturday", "openTime": "19.00", "closeTime": "23.59"}]
  MenuCompleteWithID:
    type: "object"
    properties:
      menuID:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      menuItems:
        type: "array"
        items:
          $ref: "#/definitions/MenuItem"
    example:
      menuID: 2
      name: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags: [{"name": "Italian", "color": "#FFBC8C"}, {"name": "Mediterranean", "color": "#FFBC8C"}]
      menuItems: [{"name": "Spaghetti alla carbonara", "description": "Fantastic italian dish made of spaghetti, pig cheek, eggs, black pepper, pecorino romano", "type": "dish", "priceEuros": 10, "tags": [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Pasta", "color": "#99C99B"}, {"name": "Italian", "color": "#FFBC8C"}], "imageLink": "www.cloudStorage.com/Carbonara"}, {"name": "Polpette al sugo", "description": "Meatballs with tomato sauce", "type": "dish", "priceEuros": 7, "tags": [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Meat", "color": "#FFBC8C"}, {"name": "Italian", "color": "#FFBC8C"}], "imageLink": "www.cloudStorage.com/Meatballs"}]
  MenuWithoutItems:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
    example:
      name: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags: ["Italian", "Mediterranean"]
  MenuRetrievedToCustomer:
    type: "object"
    properties:
      restaurant:
        type: "object"
        properties:
          restaurantName:
            type: "string"
          address:
            type: "string"
          city:
            type: "string"
          country:
            type: "string"
          latitude:
            type: "number"
          longitude:
            type: "number"
      menuName:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
      menuRating:
        type: "integer"
      menuItems:
        type: "array"
        items:
          $ref: "#/definitions/MenuItem"
    example:
      restaurant: {"restaurantName": "Emilio's Pizza", "address": "André route 45", "city": "Rome", "country": "Italy", "latitude": 48.4281350802915, "longitude": -110.0792542197085}
      menuName: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags: [{"name": "Italian", "color": "#FFBC8C"}, {"name": "Mediterranean", "color": "#FFBC8C"}]
      menuRating: 5
      menuItems: [{"name": "Spaghetti alla carbonara", "description": "Fantastic italian dish made of spaghetti, pig cheek, eggs, black pepper, pecorino romano", "type": "dish", "priceEuros": 10, "tags": [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Pasta", "color": "#99C99B"}, {"name": "Italian", "color": "#FFBC8C"}], "imageLink": "www.cloudStorage.com/Carbonara"}, {"name": "Polpette al sugo", "description": "Meatballs with tomato sauce", "type": "dish", "priceEuros": 7, "tags": [{"name": "Mediterranean", "color": "#FFBC8C"}, {"name": "Meat", "color": "#FFBC8C"}, {"name": "Italian", "color": "#FFBC8C"}], "imageLink": "www.cloudStorage.com/Meatballs"}]
  Tag:
    type: "object"
    properties:
      name:
        type: "string"
      color:
        type: "string"
    example:
      name: "Mediterranean"
      color: "#FFBC8C"
---
swagger: "2.0"
info:
  description: "This is the API reference of The Spoon project.\n \n VERSIONING: The\
    \ version number works in this way: it's composed of two numbers separated by\
    \ a point. The first number identifies the Sprint, so for example the version\
    \ 2.1 of the API reference is related to the Sprint number 2. The second number\
    \ starts from 0 and has to be increased by one each time the file is modified.\
    \ The person who modifies this document is responsible for increasing the number.\n\
    \ \n GROUPING OF ENDPOINTS: The endpoints are grouped by dividing them into customers'\
    \ operations and owners' operations. All the endpoints that are not strictly related\
    \ to customers nor owners remain inside the default group.\n \n AUTHENTICATION/AUTHORIZATION:\
    \ The json web token returned when the login is performed is supposed to be put\
    \ into x-auth-token header in the endpoints that require authorization"
  version: "3.0"
  title: "The Spoon API reference"
tags:
- name: "customer"
  description: "Operations about customers"
- name: "owner"
  description: "Operations about owners"
paths:
  /api/user/customer/register:
    post:
      tags:
      - "customer"
      summary: "Creates customer"
      description: "Creates a new customer profile. This endpoint is used only for\
        \ customer registration.\n The endpoint, if the registration succeeds, returns\
        \ the username of the account as a confirmation."
      operationId: "createCustomer"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Customer that needs to register"
        required: true
        schema:
          $ref: "#/definitions/Customer"
      responses:
        "201":
          description: "Customer registered"
          schema:
            $ref: "#/definitions/Username"
        "400":
          description: "Username or email already taken"
      x-swagger-router-controller: "Customer"
  /api/user/owner/register:
    post:
      tags:
      - "owner"
      summary: "Creates restaurant owner"
      description: "Creates a new restaurant owner profile. This endpoint is used\
        \ only for restaurant owner registration.\n The endpoint, if the registration\
        \ succeeds, returns the username of the account as a confirmation."
      operationId: "createOwner"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Restaurant owner that needs to register"
        required: true
        schema:
          $ref: "#/definitions/Owner"
      responses:
        "201":
          description: "Restaurant owner registered"
          schema:
            $ref: "#/definitions/Username"
        "400":
          description: "Username or email already taken"
      x-swagger-router-controller: "Owner"
  /api/user/login:
    post:
      summary: "Logs user into the system"
      description: "Logs user into the system. This endpoint is used both for restaurant\
        \ owner and customer login. In order to distinguish them, in the request json\
        \ there's the flag ''isRestaurantOwner''.\n If the login succeeds, returns\
        \ the json web token that is supposed to be stored on the frontend application\
        \ (for example in the local storage of the web browser). Each time the frontend\
        \ application needs to access an endpoint that requires authentication, that\
        \ token will be put in the header of the request."
      operationId: "loginUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User that needs to register"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        "201":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Token"
        "400":
          description: "Invalid username or password"
      x-swagger-router-controller: "Default"
  /api/user/owner/restaurant:
    post:
      tags:
      - "owner"
      summary: "Configure data of the restaurant"
      description: "Save the data of the restaurant given by the owner. Authentication\
        \ is needed.\n One of the parameter to be passed is the imageID, this is the\
        \ flow:\n 1. The restaurant owner is in the page in which he can input the\
        \ restaurant data. He will upload the photo of the restaurant while he is\
        \ writing all the fields of the form.\n 2. The uploading of the photo is done\
        \ by sending the photo to the /api/image endpoint. While the restaurant owner\
        \ is still writing the fields of the form, the message to that endpoint is\
        \ sent and the imageID is received as a response.\n 3. When the restaurant\
        \ owner finishes writing the fields of the form and click the send button,\
        \ the photo was actually already been ent in the point 2 and he doesn't have\
        \ to wait for the upload (if he was fast compiling the form and the upload\
        \ isn't finished yet, at least he has to wait less because it was already\
        \ started). The imageID received as a response by the /api/image endpoint\
        \ will be sent to this endpoint with the data of the form in a json, because\
        \ the backend needs it in order to associate the json to the previously uploaded\
        \ photo."
      operationId: "configureRestaurant"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Restaurant data"
        required: true
        schema:
          $ref: "#/definitions/Restaurant"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/RestaurantID"
        "401":
          description: "Access denied"
      security:
      - Bearer: []
      x-security-scopes:
      - "owner"
      x-swagger-router-controller: "Owner"
  /api/user/owner/restaurant/menu:
    get:
      tags:
      - "owner"
      summary: "Returns all the menus of the restaurant"
      description: "Returns all the menus of the restaurant. Since authentication\
        \ is required, the backend is able to get which restaurant is involved from\
        \ the authentication token. It also returns the ID of each menu, that can\
        \ be in the post and in the get of the endpoint /api/user/owner/restaurant/menu/{menuID}.\n\
        \ It's important to underline that this endpoint doesn't provide the menu\
        \ items of the menus. In order to receive them a get to the other mentioned\
        \ endpoint is necessary."
      operationId: "getOwnMenus"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MenuWithID"
        "401":
          description: "Access denied"
      security:
      - Bearer: []
      x-security-scopes:
      - "owner"
      x-swagger-router-controller: "Owner"
    post:
      tags:
      - "owner"
      summary: "Add a menu to a restaurant"
      description: "Add a menu to a restaurant of a restaurant owner, which needs\
        \ to be logged in"
      operationId: "addMenu"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Menu data"
        required: true
        schema:
          $ref: "#/definitions/Menu"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MenuID"
        "401":
          description: "Access denied"
      security:
      - Bearer: []
      x-security-scopes:
      - "owner"
      x-swagger-router-controller: "Owner"
  /api/user/owner/restaurant/menu/{menuID}:
    get:
      tags:
      - "owner"
      summary: "Return data of a specific menu of the owner"
      description: "Returns all the data about the menu with given menuID, even the\
        \ menu items inside it. The photos of the menu items are saved in the Amazon\
        \ s3 storage, so the links to the cloud storage are also returned. The frontend\
        \ will directly download them from the cloud storage, they won't be sent by\
        \ the backend with this endpoint.\n The menuID should be related to a menu\
        \ of the restaurant owned by the authenticated restaurant owner, otherwise\
        \ an error response will be received."
      operationId: "getMenuOwner"
      produces:
      - "application/json"
      parameters:
      - name: "menuID"
        in: "path"
        description: "ID of the menu to be returned"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Menu"
        "401":
          description: "Access denied"
        "404":
          description: "No menu associated to that restaurant found"
      security:
      - Bearer: []
      x-security-scopes:
      - "owner"
      x-swagger-router-controller: "Owner"
    post:
      tags:
      - "owner"
      summary: "Edit a menu"
      description: "Edits a given menu. To identify the menu, the menuID needs to\
        \ be given. When the get that returns all the menus of the restaurant is performed,\
        \ the menuID of each menu is also returned, so the menuID can be taken from\
        \ there. Authentication is required."
      operationId: "editMenu"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "menuID"
        in: "path"
        description: "ID of the menu to be edited"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Data of the menu to be saved"
        required: true
        schema:
          $ref: "#/definitions/Menu"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/MenuID"
        "401":
          description: "Access denied"
        "404":
          description: "Menu not found"
      security:
      - Bearer: []
      x-security-scopes:
      - "owner"
      x-swagger-router-controller: "Owner"
  /api/user/customer/menu/searchByMenuItem:
    get:
      tags:
      - "customer"
      summary: "Search by menu item"
      description: "Returns all the menus with given menu item (dish/drink) with menuID.\
        \ It also returns the names of the associated restaurants with restaurantID.\n\
        \ The menu items inside every menu are not returned. It will be needed to\
        \ access the endpoint /api/user/customer/menu/{menuID} to get the menu items\
        \ of a specific menu (the menuID passed can be obtained from the response\
        \ of this endpoint, since it returns the menuID of every menu)."
      operationId: "searchByMenuItem"
      produces:
      - "application/json"
      parameters:
      - name: "menuItemName"
        in: "query"
        description: "Name of the desired menu item"
        required: true
        type: "string"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/MenuAndRestaurant"
      x-swagger-router-controller: "Customer"
  /api/user/customer/menu/{menuID}:
    get:
      tags:
      - "customer"
      summary: "Return data of a specific menu"
      description: "Returns all the data about the menu with given menuID, even the\
        \ menu items inside it. The photos of the menu items are saved in the Amazon\
        \ s3 storage, so the links to the cloud storage are also returned. The frontend\
        \ will directly download them from the cloud storage, they won't be sent by\
        \ the backend with this endpoint."
      operationId: "getMenuCustomer"
      produces:
      - "application/json"
      parameters:
      - name: "menuID"
        in: "path"
        description: "ID of the menu to be returned"
        required: true
        type: "integer"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Menu"
      x-swagger-router-controller: "Customer"
  /api/image:
    post:
      summary: "Upload an image"
      description: "This endpoint is used in order to upload EVERY image. For example,\
        \ when a restaurant owner is registering his restaurant data, he will need\
        \ to upload an image. Both this endpoint and the dedicated endpoint (POST\
        \ /api/user/owner/restaurant) will be used. This endpoint to upload the image,\
        \ the other one to upload all the other textual data (with a json). The images\
        \ will be stored using Amazon s3. The ID of the image is returned.\n For more\
        \ information, this is used as a reference:  https://stackoverflow.com/questions/33279153/rest-api-file-ie-images-processing-best-practices\
        \ \n This endpoint requires authentication: we don't want anyone to update\
        \ images but only authenticated users."
      operationId: "uploadImage"
      consumes:
      - "image/png"
      - "image/jpeg"
      produces:
      - "application/json"
      parameters: []
      responses:
        "201":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/ImageID"
      security:
      - Bearer: []
      x-security-scopes:
      - "owner"
      x-swagger-router-controller: "Default"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "x-auth-token"
    in: "header"
definitions:
  Token:
    type: "object"
    properties:
      token:
        type: "string"
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOjI5LCJpYXQiOjE1NjE5OTg2NjB9.SWYMJXTTM8pe6NQw1QwS-d8Btt6Isuzzk5JtH775uV0"
  Customer:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    example:
      username: "xXEmilioXx"
      email: "user@gmail.com"
      password: "123456"
  Owner:
    type: "object"
    properties:
      username:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    example:
      username: "xXEmilioXx"
      name: "Emilio"
      surname: "Imperiali"
      email: "user@gmail.com"
      password: "123456"
  Username:
    type: "object"
    properties:
      username:
        type: "string"
    example:
      username: "xXEmilioXx"
  UserLogin:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
      isRestaurantOwner:
        type: "boolean"
    example:
      username: "xXEmilioXx"
      password: "123456"
      isRestaurantOwner: true
  Restaurant:
    type: "object"
    properties:
      name:
        type: "string"
      address:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      latitude:
        type: "number"
      longitude:
        type: "number"
      imageID:
        type: "integer"
    example:
      name: "Emilio's Pizza"
      address: "André route 45"
      city: "Rome"
      country: "Italy"
      latitude: 48.42813508029149716094252653419971466064453125
      longitude: -110.07925421970850266006891615688800811767578125
      imageID: 5
  RestaurantID:
    type: "object"
    properties:
      restaurantID:
        type: "integer"
    example:
      restaurantID: 54
  Menu:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
      menuItems:
        type: "array"
        items:
          $ref: "#/definitions/MenuItem"
    example:
      name: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags:
      - "Italian"
      - "Mediterranean"
      menuItems:
      - name: "Spaghetti alla carbonara"
        description: "Fantastic italian dish made of spaghetti, pig cheek, eggs, black\
          \ pepper, pecorino romano"
        priceEuros: 10
        tags:
        - "Mediterranean"
        - "Pasta"
        - "Italian"
        imageLink: "www.cloudStorage.com/Carbonara"
      - name: "Polpette al sugo"
        description: "Meatballs with tomato sauce"
        priceEuros: 7
        tags:
        - "Mediterranean"
        - "Meat"
        - "Italian"
        imageLink: "www.cloudStorage.com/Meatballs"
  MenuItem:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      priceEuros:
        type: "number"
      tags:
        type: "array"
        items:
          type: "string"
      imageLink:
        type: "string"
    example:
      name: "Spaghetti alla carbonara"
      description: "Fantastic italian dish made of spaghetti, pig cheek, eggs, black\
        \ pepper, pecorino romano"
      priceEuros: 10
      tags:
      - "Mediterranean"
      - "Pasta"
      - "Italian"
      imageLink: "www.cloudStorage.com/Carbonara"
  MenuID:
    type: "object"
    properties:
      menuID:
        type: "integer"
    example:
      menuID: 2
  MenuWithID:
    type: "object"
    properties:
      menuID:
        type: "integer"
      name:
        type: "string"
      description:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
    example:
      menuID: 2
      name: "Emilio's menu of the day"
      description: "Our special menu of today"
      tags:
      - "Italian"
      - "Mediterranean"
  MenuAndRestaurant:
    type: "object"
    properties:
      restaurantData:
        $ref: "#/definitions/MenuAndRestaurant_restaurantData"
      menu:
        $ref: "#/definitions/MenuWithID"
    example:
      restaurantData:
        restaurantID: 54
        restaurantName: "Emilio's Pizza"
      menu:
        menuID: 2
        name: "Emilio's menu of the day"
        description: "Our special menu of today"
        tags:
        - "Italian"
        - "Mediterranean"
  ImageID:
    type: "object"
    properties:
      imageID:
        type: "integer"
    example:
      imageID: 5
  MenuAndRestaurant_restaurantData:
    type: "object"
    properties:
      restaurantID:
        type: "integer"
      restaurantName:
        type: "string"

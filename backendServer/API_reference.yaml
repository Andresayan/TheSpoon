swagger: "2.0"
info:
  description: "This is the API reference of The Spoon project.\n IMPORTANT: The version number works in this way: it's composed of two numbers separated by a point. The first number identifies the Sprint, so for example the version 2.1 of the API reference is related to the Sprint number 2. The second number starts from 0 and has to be increased by one each time the file is modified. The person who modifies this document is responsible for increasing the number."
  version: "1.2"
  title: "The Spoon API reference"
paths:
  /api/user/customer/register:
    post:
      summary: "Creates customer"
      description: "Creates a new customer profile. This endpoint is used only for customer registration.\n The endpoint, if the registration succeeds, returns the email of the account as a confirmation."
      operationId: "createCustomer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer that needs to register"
          required: true
          schema:
            $ref: "#/definitions/Customer"
      responses:
        201:
          description: "Customer registered"
          schema:
            $ref: "#/definitions/UserEmail"
        400:
          description: "Customer already registered"
  /api/user/owner/register:
    post:
      summary: "Creates restaurant owner"
      description: "Creates a new restaurant owner profile. This endpoint is used only for restaurant owner registration.\n The endpoint, if the registration succeeds, returns the email of the account as a confirmation."
      operationId: "createOwner"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Restaurant owner that needs to register"
          required: true
          schema:
            $ref: "#/definitions/Owner"
      responses:
        201:
          description: "Restaurant owner registered"
          schema:
            $ref: "#/definitions/UserEmail"
        400:
          description: "Restaurant owner already registered"
  /api/user/login:
    post:
      summary: "Logs user into the system"
      description: "Logs user into the system. This endpoint is used both for restaurant owner and customer login. In order to distinguish them, in the request json there's the flag ''isRestaurantOwner''.\n If the login succeeds, returns the json web token that is supposed to be stored on the frontend application (for example in the local storage of the web browser). Each time the frontend application needs to access an endpoint that requires authentication, that token will be put in the header of the request."
      operationId: "loginUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User that needs to register"
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Token"
        400:
          description: "Invalid username or password"
          
          
          
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "json_web_token"
    in: "header"
    
    
definitions:
  Token:
    type: "object"
    properties:
      token:
        type: "string"
    example:
      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOjI5LCJpYXQiOjE1NjE5OTg2NjB9.SWYMJXTTM8pe6NQw1QwS-d8Btt6Isuzzk5JtH775uV0"
  Customer:
    type: "object"
    properties:
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      birthday:
        type: "string"
      nationality:
        type: "string"
    example:
      name: "Emilio"
      surname: "Imperiali"
      email: "user@gmail.com"
      password: "1234"
      birthday: "1996-03-19"
      nationality: "Italian"
  Owner:
    type: "object"
    properties:
      name:
        type: "string"
      surname:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    example:
      name: "Emilio"
      surname: "Imperiali"
      email: "user@gmail.com"
      password: "1234"
  UserEmail:
    type: "object"
    properties:
      email:
        type: "string"
    example:
      email: "user@gmail.com"
  UserLogin:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
      isRestaurantOwner:
        type: "boolean"
    example:
      email: "user@gmail.com"
      password: "1234"
      isRestaurantOwner: true